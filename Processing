//variable Declarations
import netP5.*;    //importing for OSC communication
import oscP5.*;    //importing for OSC communication
import de.voidplus.leapmotion.*; //Leap Motion Control library import*****************************************************************************
int n1=0, n2=0, n3=0, n4=0, n5=0, n6=0, n7=0, n8=0, n0=1;    //note drawing variables
int n1n=0, n2n=0, n3n=0, n4n=0, n5n=0, n6n=0, n7n=0, n8n=0, n0n=1;    //next note drawing variables
int counterst=0;    //counter for drawing current or next
String comingstr;    //messagetaker variables

float solexek, soleyek, sagexek, sageyek, sag1px, sag1py, sag2px, sag2py, sag3px, sag3py, sag4px, sag4py, sag5px, sag5py, sol1px, sol1py, sol2px, sol2py, sol3px, sol3py, sol4px, sol4py, sol5px, sol5py;  // variables defining leap***
PVector solepoz, sagepoz, sag1p, sag2p, sag3p, sag4p, sag5p, sol1p, sol2p, sol3p, sol4p, sol5p;

LeapMotion leap; //defining leap******************************************************************************

OscP5 oscP5;        //for OSC communication var
NetAddress myRemoteLocationSC;    //variable for sending OSC to SC
NetAddress myRemoteLocationMax;   //variable for sending OSC to Max

PImage Guda;      //Declaring Guda is an image file


void setup() {
frameRate(50);
size(1118,1164); //resoulution (it has to be same with Guda picture size)
background(255); //background color
leap = new LeapMotion(this); //define leap   *****************************************************************************
leap = new LeapMotion(this).allowGestures("circle"); //circle gesture only allowed
Guda = loadImage("Guda.jpeg"); //imageloading
oscP5 = new OscP5(this, 8080); //OSCpath
myRemoteLocationSC = new NetAddress("127.0.0.1", 57120); //osc NetAdress
myRemoteLocationMax = new NetAddress("127.0.0.1", 3131); //osc NetAdress
println(oscP5); //osc coms printing
image(Guda,0,0,1118,1164);

};


void draw(){
  stroke(0,0,255);
  noFill();
  strokeWeight(20);
  
  if (counterst%2 == 0)
  {
if (n0 == 1) {circle(566,600, 320);}; //Bass
if (n1 == 1) {circle(724,962, 250);}; //C4
if (n2 == 1) {circle(382,944, 250);}; //D4
if (n3 == 1) {circle(911,728, 230);}; //E4
if (n4 == 1) {circle(199,701, 240);}; //F4
if (n5 == 1) {circle(896,416, 195);}; //G4
if (n6 == 1) {circle(234,403, 195);}; //A4
if (n7 == 1) {circle(715,228, 170);}; //B4
if (n8 == 1) {circle(456,230, 170);}; //C5
  };
  
  if (counterst%2 == 1)
  {
  stroke(0,255,0);
if (n0n == 1) {circle(566,600, 350);}; //Bass
if (n1n == 1) {circle(724,962, 280);}; //C4
if (n2n == 1) {circle(382,944, 280);}; //D4
if (n3n == 1) {circle(911,728, 260);}; //E4
if (n4n == 1) {circle(199,701, 270);}; //F4
if (n5n == 1) {circle(896,416, 225);}; //G4
if (n6n == 1) {circle(234,403, 225);}; //A4
if (n7n == 1) {circle(715,228, 200);}; //B4
if (n8n == 1) {circle(456,230, 200);}; //C5
  };


//**************************************************************************************************NOKS LEAP MOTION FOR PROCESSING**********************************************************************


for (Hand hand : leap.getHands ()) {
    

    // ==================================================
    // 2. Hand

    int     handId             = hand.getId();
    PVector handPosition       = hand.getPosition();
    PVector handStabilized     = hand.getStabilizedPosition();
    PVector handDirection      = hand.getDirection();
    PVector handDynamics       = hand.getDynamics();
    float   handRoll           = hand.getRoll();
    float   handPitch          = hand.getPitch();
    float   handYaw            = hand.getYaw();
    boolean handIsLeft         = hand.isLeft();
    boolean handIsRight        = hand.isRight();
    float   handGrab           = hand.getGrabStrength();
    float   handPinch          = hand.getPinchStrength();
    float   handTime           = hand.getTimeVisible();
    PVector spherePosition     = hand.getSpherePosition();
    float   sphereRadius       = hand.getSphereRadius();
    
    
    if (hand.isLeft()) {
      solepoz = hand.getPosition();
      solexek = solepoz.x;
      soleyek = solepoz.y;
      
      Finger sol1 = hand.getFinger(0);
      PVector sol1p = sol1.getPosition();
      sol1px = sol1p.x;
      sol1py = sol1p.y;
      
      Finger sol2 = hand.getFinger(1);
      PVector sol2p = sol2.getPosition();
      sol2px = sol2p.x;
      sol2py = sol2p.y;
      
      Finger sol3 = hand.getFinger(2);
      PVector sol3p = sol3.getPosition();
      sol3px = sol3p.x;
      sol3py = sol3p.y;
      
      Finger sol4 = hand.getFinger(3);
      PVector sol4p = sol4.getPosition();
      sol4px = sol4p.x;
      sol4py = sol4p.y;
      
      Finger sol5 = hand.getFinger(4);
      PVector sol5p = sol5.getPosition();
      sol5px = sol5p.x;
      sol5py = sol5p.y;
      
      float pinchsol = hand.getPinchStrength();
      int pinchsol2 = int(pinchsol*100);
      float grabsol = hand.getGrabStrength();
      int grabsol2 = int(grabsol*100);
      float rollsol = hand.getRoll();
      int rollsol2 = int(rollsol);
      
      OscMessage msg = new OscMessage("/proc/solel"); //constant send
      msg.add("Sol El X Ekseni:"); 
      msg.add(int(solexek));  
      msg.add("Sol El Y Ekseni:");
      msg.add(int(soleyek));
      msg.add("Sol El Basparmak X:");
      msg.add(int(sol1px));  
      msg.add("Sol El Basparmak Y:"); 
      msg.add(int(sol1py));
      msg.add("Sol El Isaret X:");
      msg.add(int(sol2px));  
      msg.add("Sol El Isaret Y:"); 
      msg.add(int(sol2py));
      msg.add("Sol El Orta X:");
      msg.add(int(sol3px));  
      msg.add("Sol El Orta Y:"); 
      msg.add(int(sol3py));
      msg.add("Sol El Yuzuk X:");
      msg.add(int(sol4px));  
      msg.add("Sol El Yuzuk Y:"); 
      msg.add(int(sol4py));
      msg.add("Sol El Kucuk X:");
      msg.add(int(sol5px));  
      msg.add("Sol El Kucuk Y:"); 
      msg.add(int(sol5py));
      msg.add("Sol El Pinch:"); 
      msg.add(pinchsol2);
      msg.add("Sol El Grab:"); 
      msg.add(grabsol2);
      msg.add("Sol El Roll:"); 
      msg.add(rollsol2);
      oscP5.send(msg, myRemoteLocationSC);
      oscP5.send(msg, myRemoteLocationMax);
      
      OscMessage msgsolelpoz = new OscMessage("/proc/solelpoz"); //constant send
      msgsolelpoz.add("Sol El X Ekseni:"); 
      msgsolelpoz.add(int(solexek));  
      msgsolelpoz.add("Sol El Y Ekseni:");
      msgsolelpoz.add(int(soleyek));
      oscP5.send(msgsolelpoz, myRemoteLocationSC);
      oscP5.send(msgsolelpoz, myRemoteLocationMax);
      
      OscMessage msgsolelparmak = new OscMessage("/proc/solelparmak"); //constant send
      msgsolelparmak.add("Sol El Basparmak X:");
      msgsolelparmak.add(int(sol1px));  
      msgsolelparmak.add("Sol El Basparmak Y:"); 
      msgsolelparmak.add(int(sol1py));
      msgsolelparmak.add("Sol El Isaret X:");
      msgsolelparmak.add(int(sol2px));  
      msgsolelparmak.add("Sol El Isaret Y:"); 
      msgsolelparmak.add(int(sol2py));
      msgsolelparmak.add("Sol El Orta X:");
      msgsolelparmak.add(int(sol3px));  
      msgsolelparmak.add("Sol El Orta Y:"); 
      msgsolelparmak.add(int(sol3py));
      msgsolelparmak.add("Sol El Yuzuk X:");
      msgsolelparmak.add(int(sol4px));  
      msgsolelparmak.add("Sol El Yuzuk Y:"); 
      msgsolelparmak.add(int(sol4py));
      msgsolelparmak.add("Sol El Kucuk X:");
      msgsolelparmak.add(int(sol5px));  
      msgsolelparmak.add("Sol El Kucuk Y:"); 
      msgsolelparmak.add(int(sol5py));
      oscP5.send(msgsolelparmak, myRemoteLocationSC);
      oscP5.send(msgsolelparmak, myRemoteLocationMax);
      
      OscMessage msgsolelpinch = new OscMessage("/proc/solelpinch"); //constant send
      msgsolelpinch.add("Sol El Pinch:"); 
      msgsolelpinch.add(pinchsol2);
      oscP5.send(msgsolelpinch, myRemoteLocationSC);
      oscP5.send(msgsolelpinch, myRemoteLocationMax);
      
      OscMessage msgsolelgrab = new OscMessage("/proc/solelgrab"); //constant send
      msgsolelgrab.add("Sol El Grab:"); 
      msgsolelgrab.add(grabsol2);
      msgsolelgrab.add("Sol El Y Ekseni:");
      msgsolelgrab.add(int(soleyek));
      msgsolelgrab.add("Sol El Pinch:"); 
      msgsolelgrab.add(pinchsol2);
      oscP5.send(msgsolelgrab, myRemoteLocationSC);
      oscP5.send(msgsolelgrab, myRemoteLocationMax);
      
      OscMessage msgsolelgrab2 = new OscMessage("/proc/solelgrab2"); //constant send
      msgsolelgrab2.add("Sol El Grab:"); 
      msgsolelgrab2.add(grabsol2);
      oscP5.send(msgsolelgrab2, myRemoteLocationSC);
      oscP5.send(msgsolelgrab2, myRemoteLocationMax);
      
      OscMessage msgsolelroll = new OscMessage("/proc/solelroll"); //constant send
      msgsolelroll.add("Sol El Roll:"); 
      msgsolelroll.add(rollsol2);
      oscP5.send(msgsolelroll, myRemoteLocationSC);
      oscP5.send(msgsolelroll, myRemoteLocationMax);
      
    };
    
      
    if (hand.isRight()) {
      sagepoz = hand.getPosition();
      sagexek = sagepoz.x;
      sageyek = sagepoz.y;
      
      Finger sag1 = hand.getFinger(0);
      PVector sag1p = sag1.getPosition();
      sag1px = sag1p.x;
      sag1py = sag1p.y;
      
      Finger sag2 = hand.getFinger(1);
      PVector sag2p = sag2.getPosition();
      sag2px = sag2p.x;
      sag2py = sag2p.y;
      
      Finger sag3 = hand.getFinger(2);
      PVector sag3p = sag3.getPosition();
      sag3px = sag3p.x;
      sag3py = sag3p.y;
      
      Finger sag4 = hand.getFinger(3);
      PVector sag4p = sag4.getPosition();
      sag4px = sag4p.x;
      sag4py = sag4p.y;
      
      Finger sag5 = hand.getFinger(4);
      PVector sag5p = sag5.getPosition();
      sag5px = sag5p.x;
      sag5py = sag5p.y;
      
      float pinchsag = hand.getPinchStrength();
      int pinchsag2 = int(pinchsag*100);
      float grabsag = hand.getGrabStrength();
      int grabsag2 = int(grabsag*100);
      float rollsag = hand.getRoll();
      int rollsag2 = int(rollsag);
      
      OscMessage msg = new OscMessage("/proc/sagel"); //constant send
      msg.add("Sag El X Ekseni:"); 
      msg.add(int(sagexek));  
      msg.add("Sag El Y Ekseni:");
      msg.add(int(sageyek));
      msg.add("Sag El Basparmak X:");
      msg.add(int(sag1px));  
      msg.add("Sag El Basparmak Y:"); 
      msg.add(int(sag1py));
      msg.add("Sag El Isaret X:");
      msg.add(int(sag2px));  
      msg.add("Sag El Isaret Y:"); 
      msg.add(int(sag2py));
      msg.add("Sag El Orta X:");
      msg.add(int(sag3px));  
      msg.add("Sag El Orta Y:"); 
      msg.add(int(sag3py));
      msg.add("Sag El Yuzuk X:");
      msg.add(int(sag4px));  
      msg.add("Sag El Yuzuk Y:"); 
      msg.add(int(sag4py));
      msg.add("Sag El Kucuk X:");
      msg.add(int(sag5px));  
      msg.add("Sag El Kucuk Y:"); 
      msg.add(int(sag5py));
      msg.add("Sag El Pinch:"); 
      msg.add(pinchsag2);
      msg.add("Sag El Grab:"); 
      msg.add(grabsag2);
      msg.add("Sag El Roll:"); 
      msg.add(rollsag2);
      oscP5.send(msg, myRemoteLocationSC);
      oscP5.send(msg, myRemoteLocationMax);
      
      OscMessage msgsagelpoz = new OscMessage("/proc/sagelpoz"); //constant send
      msgsagelpoz.add("Sağ El X Ekseni:"); 
      msgsagelpoz.add(int(sagexek));  
      msgsagelpoz.add("Sağ El Y Ekseni:");
      msgsagelpoz.add(int(sageyek));
      oscP5.send(msgsagelpoz, myRemoteLocationSC);
      oscP5.send(msgsagelpoz, myRemoteLocationMax);
      
      OscMessage msgsagelparmak = new OscMessage("/proc/sagelparmak"); //constant send
      msgsagelparmak.add("Sag El Basparmak X:");
      msgsagelparmak.add(int(sag1px));  
      msgsagelparmak.add("Sag El Basparmak Y:"); 
      msgsagelparmak.add(int(sag1py));
      msgsagelparmak.add("Sag El Isaret X:");
      msgsagelparmak.add(int(sag2px));  
      msgsagelparmak.add("Sag El Isaret Y:"); 
      msgsagelparmak.add(int(sag2py));
      msgsagelparmak.add("Sag El Orta X:");
      msgsagelparmak.add(int(sag3px));  
      msgsagelparmak.add("Sag El Orta Y:"); 
      msgsagelparmak.add(int(sag3py));
      msgsagelparmak.add("Sag El Yuzuk X:");
      msgsagelparmak.add(int(sag4px));  
      msgsagelparmak.add("Sag El Yuzuk Y:"); 
      msgsagelparmak.add(int(sag4py));
      msgsagelparmak.add("Sag El Kucuk X:");
      msgsagelparmak.add(int(sag5px));  
      msgsagelparmak.add("Sag El Kucuk Y:"); 
      msgsagelparmak.add(int(sag5py));
      oscP5.send(msgsagelparmak, myRemoteLocationSC);
      oscP5.send(msgsagelparmak, myRemoteLocationMax);
      
      OscMessage msgsagelpinch = new OscMessage("/proc/sagelpinch"); //constant send
      msgsagelpinch.add("Sag El Pinch:"); 
      msgsagelpinch.add(pinchsag2);
      oscP5.send(msgsagelpinch, myRemoteLocationSC);
      oscP5.send(msgsagelpinch, myRemoteLocationMax);
      
      OscMessage msgsagelgrab = new OscMessage("/proc/sagelgrab"); //constant send
      msgsagelgrab.add("Sag El Grab:"); 
      msgsagelgrab.add(grabsag2);
      msgsagelgrab.add("Sağ El Y Ekseni:");
      msgsagelgrab.add(int(sageyek));
      msgsagelgrab.add("Sag El Pinch:"); 
      msgsagelgrab.add(pinchsag2);
      oscP5.send(msgsagelgrab, myRemoteLocationSC);
      oscP5.send(msgsagelgrab, myRemoteLocationMax);
      
      OscMessage msgsagelgrab2 = new OscMessage("/proc/sagelgrab2"); //constant send
      msgsagelgrab2.add("Sag El Grab:"); 
      msgsagelgrab2.add(grabsag2);
      oscP5.send(msgsagelgrab2, myRemoteLocationSC);
      oscP5.send(msgsagelgrab2, myRemoteLocationMax);
      
      OscMessage msgsagelroll = new OscMessage("/proc/sagelroll"); //constant send
      msgsagelroll.add("Sag El Roll:"); 
      msgsagelroll.add(rollsag2);
      oscP5.send(msgsagelroll, myRemoteLocationSC);
      oscP5.send(msgsagelroll, myRemoteLocationMax);
      
      
    };
      
    

    // ==================================================
    // 3. Arm

    if (hand.hasArm()) {
      Arm     arm              = hand.getArm();
      float   armWidth         = arm.getWidth();
      PVector armWristPos      = arm.getWristPosition();
      PVector armElbowPos      = arm.getElbowPosition();
    }


    // ==================================================
    // 4. Finger

    Finger  fingerThumb        = hand.getThumb();
    // or                        hand.getFinger("thumb");
    // or                        hand.getFinger(0);

    Finger  fingerIndex        = hand.getIndexFinger();
    // or                        hand.getFinger("index");
    // or                        hand.getFinger(1);

    Finger  fingerMiddle       = hand.getMiddleFinger();
    // or                        hand.getFinger("middle");
    // or                        hand.getFinger(2);

    Finger  fingerRing         = hand.getRingFinger();
    // or                        hand.getFinger("ring");
    // or                        hand.getFinger(3);

    Finger  fingerPink         = hand.getPinkyFinger();
    // or                        hand.getFinger("pinky");
    // or                        hand.getFinger(4);


    for (Finger finger : hand.getFingers()) {
      // or              hand.getOutstretchedFingers();
      // or              hand.getOutstretchedFingersByAngle();

      int     fingerId         = finger.getId();
      PVector fingerPosition   = finger.getPosition();
      PVector fingerStabilized = finger.getStabilizedPosition();
      PVector fingerVelocity   = finger.getVelocity();
      PVector fingerDirection  = finger.getDirection();
      float   fingerTime       = finger.getTimeVisible();

      // ------------------------------------------------
      // Selection

      switch(finger.getType()) {
      case 0:
        // System.out.println("thumb");
        break;
      case 1:
        // System.out.println("index");
        break;
      case 2:
        // System.out.println("middle");
        break;
      case 3:
        // System.out.println("ring");
        break;
      case 4:
        // System.out.println("pinky");
        break;
      }

      // ------------------------------------------------
      // Touch emulation

      int     touchZone        = finger.getTouchZone();
      float   touchDistance    = finger.getTouchDistance();

      switch(touchZone) {
      case -1: // None 
        break;
      case 0: // Hovering
        // println("Hovering (#" + fingerId + "): " + touchDistance);
       OscMessage msgtouch = new OscMessage("/proc/touch"); //constant send
       msgtouch.add("Touch");  
       msgtouch.add(0); 

       oscP5.send(msgtouch, myRemoteLocationSC);    
       oscP5.send(msgtouch, myRemoteLocationMax);
        break;
      case 1: // Touching
        // println("Touching (#" + fingerId + ")");
       OscMessage msgtouch2 = new OscMessage("/proc/touch"); //constant send
       msgtouch2.add("Touch");  
       msgtouch2.add(1); 

       oscP5.send(msgtouch2, myRemoteLocationSC);    
       oscP5.send(msgtouch2, myRemoteLocationMax);
        break;
      }
    }
  }
  
  



void oscEvent(OscMessage theOscMessage) {
  
  if (theOscMessage.addrPattern().equals("/nns"))
  {
  
  n1n = n1;
  n2n = n2;
  n3n = n3;
  n4n = n4;
  n5n = n5;
  n6n = n6;
  n7n = n7;
  n8n = n8;
  
    OscMessage msg = new OscMessage("/proc/newnotes"); 
    msg.add("RootG:"); msg.add(n0);
    msg.add("C4:"); msg.add(n1); 
    msg.add("D4:"); msg.add(n2); 
    msg.add("E4:"); msg.add(n3); 
    msg.add("F#4:"); msg.add(n4); 
    msg.add("G4:"); msg.add(n5); 
    msg.add("A4:"); msg.add(n6); 
    msg.add("B4:"); msg.add(n7); 
    msg.add("C5:"); msg.add(n8); 
    oscP5.send(msg, myRemoteLocationSC); 
    oscP5.send(msg, myRemoteLocationMax);
  
  print("### received an osc message.");
  println(theOscMessage.get(1).intValue());
  //println(theOscMessage.get(0).intValue());
  n1 = (theOscMessage.get(1).intValue());
  
    println(theOscMessage.get(2).intValue());
  //println(theOscMessage.get(0).intValue());
  n2 = (theOscMessage.get(2).intValue());
  
    println(theOscMessage.get(3).intValue());
  //println(theOscMessage.get(0).intValue());
  n3 = (theOscMessage.get(3).intValue());
  
    println(theOscMessage.get(4).intValue());
  //println(theOscMessage.get(0).intValue());
  n4 = (theOscMessage.get(4).intValue());
  
    println(theOscMessage.get(5).intValue());
  //println(theOscMessage.get(0).intValue());
  n5 = (theOscMessage.get(5).intValue());
  
    println(theOscMessage.get(6).intValue());
  //println(theOscMessage.get(0).intValue());
  n6 = (theOscMessage.get(6).intValue());
  
    println(theOscMessage.get(7).intValue());
  //println(theOscMessage.get(0).intValue());
  n7 = (theOscMessage.get(7).intValue());
  
    println(theOscMessage.get(8).intValue());
  //println(theOscMessage.get(0).intValue());
  n8 = (theOscMessage.get(8).intValue());
  
  if (n1>=-99) //check
  {
    
    if (counterst%2 == 0)
        {
        background(Guda);
        }
    
  counterst = counterst+1;
  };
  
  };

}
